// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/eventbus.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventBus_PublishTask_FullMethodName             = "/eventbus.EventBus/PublishTask"
	EventBus_PublishTaskResult_FullMethodName       = "/eventbus.EventBus/PublishTaskResult"
	EventBus_PublishTaskProgress_FullMethodName     = "/eventbus.EventBus/PublishTaskProgress"
	EventBus_SubscribeToTasks_FullMethodName        = "/eventbus.EventBus/SubscribeToTasks"
	EventBus_SubscribeToTaskResults_FullMethodName  = "/eventbus.EventBus/SubscribeToTaskResults"
	EventBus_SubscribeToTaskProgress_FullMethodName = "/eventbus.EventBus/SubscribeToTaskProgress"
)

// EventBusClient is the client API for EventBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AgentHub service definition - implements broker for Agent2Agent protocol tasks
type EventBusClient interface {
	// AgentHub broker methods for Agent2Agent protocol tasks
	PublishTask(ctx context.Context, in *PublishTaskRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	PublishTaskResult(ctx context.Context, in *PublishTaskResultRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	PublishTaskProgress(ctx context.Context, in *PublishTaskProgressRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// Subscribe to tasks assigned to a specific agent
	SubscribeToTasks(ctx context.Context, in *SubscribeToTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskMessage], error)
	// Subscribe to task results for tasks you requested
	SubscribeToTaskResults(ctx context.Context, in *SubscribeToTaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskResult], error)
	// Subscribe to task progress updates
	SubscribeToTaskProgress(ctx context.Context, in *SubscribeToTaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskProgress], error)
}

type eventBusClient struct {
	cc grpc.ClientConnInterface
}

func NewEventBusClient(cc grpc.ClientConnInterface) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) PublishTask(ctx context.Context, in *PublishTaskRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, EventBus_PublishTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) PublishTaskResult(ctx context.Context, in *PublishTaskResultRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, EventBus_PublishTaskResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) PublishTaskProgress(ctx context.Context, in *PublishTaskProgressRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, EventBus_PublishTaskProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) SubscribeToTasks(ctx context.Context, in *SubscribeToTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventBus_ServiceDesc.Streams[0], EventBus_SubscribeToTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToTasksRequest, TaskMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventBus_SubscribeToTasksClient = grpc.ServerStreamingClient[TaskMessage]

func (c *eventBusClient) SubscribeToTaskResults(ctx context.Context, in *SubscribeToTaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventBus_ServiceDesc.Streams[1], EventBus_SubscribeToTaskResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToTaskResultsRequest, TaskResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventBus_SubscribeToTaskResultsClient = grpc.ServerStreamingClient[TaskResult]

func (c *eventBusClient) SubscribeToTaskProgress(ctx context.Context, in *SubscribeToTaskResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskProgress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventBus_ServiceDesc.Streams[2], EventBus_SubscribeToTaskProgress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToTaskResultsRequest, TaskProgress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventBus_SubscribeToTaskProgressClient = grpc.ServerStreamingClient[TaskProgress]

// EventBusServer is the server API for EventBus service.
// All implementations must embed UnimplementedEventBusServer
// for forward compatibility.
//
// AgentHub service definition - implements broker for Agent2Agent protocol tasks
type EventBusServer interface {
	// AgentHub broker methods for Agent2Agent protocol tasks
	PublishTask(context.Context, *PublishTaskRequest) (*PublishResponse, error)
	PublishTaskResult(context.Context, *PublishTaskResultRequest) (*PublishResponse, error)
	PublishTaskProgress(context.Context, *PublishTaskProgressRequest) (*PublishResponse, error)
	// Subscribe to tasks assigned to a specific agent
	SubscribeToTasks(*SubscribeToTasksRequest, grpc.ServerStreamingServer[TaskMessage]) error
	// Subscribe to task results for tasks you requested
	SubscribeToTaskResults(*SubscribeToTaskResultsRequest, grpc.ServerStreamingServer[TaskResult]) error
	// Subscribe to task progress updates
	SubscribeToTaskProgress(*SubscribeToTaskResultsRequest, grpc.ServerStreamingServer[TaskProgress]) error
	mustEmbedUnimplementedEventBusServer()
}

// UnimplementedEventBusServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventBusServer struct{}

func (UnimplementedEventBusServer) PublishTask(context.Context, *PublishTaskRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTask not implemented")
}
func (UnimplementedEventBusServer) PublishTaskResult(context.Context, *PublishTaskResultRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTaskResult not implemented")
}
func (UnimplementedEventBusServer) PublishTaskProgress(context.Context, *PublishTaskProgressRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTaskProgress not implemented")
}
func (UnimplementedEventBusServer) SubscribeToTasks(*SubscribeToTasksRequest, grpc.ServerStreamingServer[TaskMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTasks not implemented")
}
func (UnimplementedEventBusServer) SubscribeToTaskResults(*SubscribeToTaskResultsRequest, grpc.ServerStreamingServer[TaskResult]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTaskResults not implemented")
}
func (UnimplementedEventBusServer) SubscribeToTaskProgress(*SubscribeToTaskResultsRequest, grpc.ServerStreamingServer[TaskProgress]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTaskProgress not implemented")
}
func (UnimplementedEventBusServer) mustEmbedUnimplementedEventBusServer() {}
func (UnimplementedEventBusServer) testEmbeddedByValue()                  {}

// UnsafeEventBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventBusServer will
// result in compilation errors.
type UnsafeEventBusServer interface {
	mustEmbedUnimplementedEventBusServer()
}

func RegisterEventBusServer(s grpc.ServiceRegistrar, srv EventBusServer) {
	// If the following call pancis, it indicates UnimplementedEventBusServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventBus_ServiceDesc, srv)
}

func _EventBus_PublishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).PublishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventBus_PublishTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).PublishTask(ctx, req.(*PublishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_PublishTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).PublishTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventBus_PublishTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).PublishTaskResult(ctx, req.(*PublishTaskResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_PublishTaskProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).PublishTaskProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventBus_PublishTaskProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).PublishTaskProgress(ctx, req.(*PublishTaskProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_SubscribeToTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).SubscribeToTasks(m, &grpc.GenericServerStream[SubscribeToTasksRequest, TaskMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventBus_SubscribeToTasksServer = grpc.ServerStreamingServer[TaskMessage]

func _EventBus_SubscribeToTaskResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToTaskResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).SubscribeToTaskResults(m, &grpc.GenericServerStream[SubscribeToTaskResultsRequest, TaskResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventBus_SubscribeToTaskResultsServer = grpc.ServerStreamingServer[TaskResult]

func _EventBus_SubscribeToTaskProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToTaskResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).SubscribeToTaskProgress(m, &grpc.GenericServerStream[SubscribeToTaskResultsRequest, TaskProgress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventBus_SubscribeToTaskProgressServer = grpc.ServerStreamingServer[TaskProgress]

// EventBus_ServiceDesc is the grpc.ServiceDesc for EventBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventbus.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishTask",
			Handler:    _EventBus_PublishTask_Handler,
		},
		{
			MethodName: "PublishTaskResult",
			Handler:    _EventBus_PublishTaskResult_Handler,
		},
		{
			MethodName: "PublishTaskProgress",
			Handler:    _EventBus_PublishTaskProgress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToTasks",
			Handler:       _EventBus_SubscribeToTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTaskResults",
			Handler:       _EventBus_SubscribeToTaskResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTaskProgress",
			Handler:       _EventBus_SubscribeToTaskProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/eventbus.proto",
}
