// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/eventbus.proto

package a2a

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentHub_PublishMessage_FullMethodName         = "/agenthub.AgentHub/PublishMessage"
	AgentHub_PublishTaskUpdate_FullMethodName      = "/agenthub.AgentHub/PublishTaskUpdate"
	AgentHub_PublishTaskArtifact_FullMethodName    = "/agenthub.AgentHub/PublishTaskArtifact"
	AgentHub_SubscribeToMessages_FullMethodName    = "/agenthub.AgentHub/SubscribeToMessages"
	AgentHub_SubscribeToTasks_FullMethodName       = "/agenthub.AgentHub/SubscribeToTasks"
	AgentHub_SubscribeToAgentEvents_FullMethodName = "/agenthub.AgentHub/SubscribeToAgentEvents"
	AgentHub_GetTask_FullMethodName                = "/agenthub.AgentHub/GetTask"
	AgentHub_CancelTask_FullMethodName             = "/agenthub.AgentHub/CancelTask"
	AgentHub_ListTasks_FullMethodName              = "/agenthub.AgentHub/ListTasks"
	AgentHub_GetAgentCard_FullMethodName           = "/agenthub.AgentHub/GetAgentCard"
	AgentHub_RegisterAgent_FullMethodName          = "/agenthub.AgentHub/RegisterAgent"
)

// AgentHubClient is the client API for AgentHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentHubClient interface {
	// PublishMessage submits an A2A message for delivery through the broker.
	// The message is wrapped in an AgentEvent and routed based on metadata.
	// Supports point-to-point, broadcast, and topic-based delivery patterns.
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// PublishTaskUpdate notifies subscribers about A2A task state changes.
	// Used to broadcast task lifecycle events (started, progress, completed).
	PublishTaskUpdate(ctx context.Context, in *PublishTaskUpdateRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// PublishTaskArtifact delivers A2A task output artifacts to subscribers.
	// Supports both atomic delivery and streaming for large artifacts.
	PublishTaskArtifact(ctx context.Context, in *PublishTaskArtifactRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// SubscribeToMessages creates a stream of A2A message events for an agent.
	// The agent receives all messages routed to it or matching its subscriptions.
	SubscribeToMessages(ctx context.Context, in *SubscribeToMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentEvent], error)
	// SubscribeToTasks creates a stream of A2A task events for an agent.
	// Includes new tasks, status updates, and artifact notifications.
	SubscribeToTasks(ctx context.Context, in *SubscribeToTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentEvent], error)
	// SubscribeToAgentEvents creates a unified stream of all events for an agent.
	// Combines messages, tasks, status updates, and artifacts in one stream.
	SubscribeToAgentEvents(ctx context.Context, in *SubscribeToAgentEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentEvent], error)
	// GetTask retrieves the current state of an A2A task by ID.
	// Returns the complete task with history, status, and artifacts.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// CancelTask cancels an active A2A task and notifies subscribers.
	// Only tasks in SUBMITTED or WORKING state can be cancelled.
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// ListTasks returns A2A tasks matching the specified criteria.
	// Supports filtering by agent, context, state, and pagination.
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// GetAgentCard returns the broker's A2A agent card for discovery.
	// Enables other agents to discover the broker's capabilities and endpoints.
	GetAgentCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentCard, error)
	// RegisterAgent registers an agent with the broker for event routing.
	// Enables the broker to route events to the agent and track its capabilities.
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
}

type agentHubClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentHubClient(cc grpc.ClientConnInterface) AgentHubClient {
	return &agentHubClient{cc}
}

func (c *agentHubClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, AgentHub_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) PublishTaskUpdate(ctx context.Context, in *PublishTaskUpdateRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, AgentHub_PublishTaskUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) PublishTaskArtifact(ctx context.Context, in *PublishTaskArtifactRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, AgentHub_PublishTaskArtifact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) SubscribeToMessages(ctx context.Context, in *SubscribeToMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentHub_ServiceDesc.Streams[0], AgentHub_SubscribeToMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToMessagesRequest, AgentEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentHub_SubscribeToMessagesClient = grpc.ServerStreamingClient[AgentEvent]

func (c *agentHubClient) SubscribeToTasks(ctx context.Context, in *SubscribeToTasksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentHub_ServiceDesc.Streams[1], AgentHub_SubscribeToTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToTasksRequest, AgentEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentHub_SubscribeToTasksClient = grpc.ServerStreamingClient[AgentEvent]

func (c *agentHubClient) SubscribeToAgentEvents(ctx context.Context, in *SubscribeToAgentEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentHub_ServiceDesc.Streams[2], AgentHub_SubscribeToAgentEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToAgentEventsRequest, AgentEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentHub_SubscribeToAgentEventsClient = grpc.ServerStreamingClient[AgentEvent]

func (c *agentHubClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, AgentHub_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, AgentHub_CancelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, AgentHub_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) GetAgentCard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentCard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentCard)
	err := c.cc.Invoke(ctx, AgentHub_GetAgentCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentHubClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, AgentHub_RegisterAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentHubServer is the server API for AgentHub service.
// All implementations must embed UnimplementedAgentHubServer
// for forward compatibility.
type AgentHubServer interface {
	// PublishMessage submits an A2A message for delivery through the broker.
	// The message is wrapped in an AgentEvent and routed based on metadata.
	// Supports point-to-point, broadcast, and topic-based delivery patterns.
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishResponse, error)
	// PublishTaskUpdate notifies subscribers about A2A task state changes.
	// Used to broadcast task lifecycle events (started, progress, completed).
	PublishTaskUpdate(context.Context, *PublishTaskUpdateRequest) (*PublishResponse, error)
	// PublishTaskArtifact delivers A2A task output artifacts to subscribers.
	// Supports both atomic delivery and streaming for large artifacts.
	PublishTaskArtifact(context.Context, *PublishTaskArtifactRequest) (*PublishResponse, error)
	// SubscribeToMessages creates a stream of A2A message events for an agent.
	// The agent receives all messages routed to it or matching its subscriptions.
	SubscribeToMessages(*SubscribeToMessagesRequest, grpc.ServerStreamingServer[AgentEvent]) error
	// SubscribeToTasks creates a stream of A2A task events for an agent.
	// Includes new tasks, status updates, and artifact notifications.
	SubscribeToTasks(*SubscribeToTasksRequest, grpc.ServerStreamingServer[AgentEvent]) error
	// SubscribeToAgentEvents creates a unified stream of all events for an agent.
	// Combines messages, tasks, status updates, and artifacts in one stream.
	SubscribeToAgentEvents(*SubscribeToAgentEventsRequest, grpc.ServerStreamingServer[AgentEvent]) error
	// GetTask retrieves the current state of an A2A task by ID.
	// Returns the complete task with history, status, and artifacts.
	GetTask(context.Context, *GetTaskRequest) (*Task, error)
	// CancelTask cancels an active A2A task and notifies subscribers.
	// Only tasks in SUBMITTED or WORKING state can be cancelled.
	CancelTask(context.Context, *CancelTaskRequest) (*Task, error)
	// ListTasks returns A2A tasks matching the specified criteria.
	// Supports filtering by agent, context, state, and pagination.
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// GetAgentCard returns the broker's A2A agent card for discovery.
	// Enables other agents to discover the broker's capabilities and endpoints.
	GetAgentCard(context.Context, *emptypb.Empty) (*AgentCard, error)
	// RegisterAgent registers an agent with the broker for event routing.
	// Enables the broker to route events to the agent and track its capabilities.
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	mustEmbedUnimplementedAgentHubServer()
}

// UnimplementedAgentHubServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentHubServer struct{}

func (UnimplementedAgentHubServer) PublishMessage(context.Context, *PublishMessageRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedAgentHubServer) PublishTaskUpdate(context.Context, *PublishTaskUpdateRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTaskUpdate not implemented")
}
func (UnimplementedAgentHubServer) PublishTaskArtifact(context.Context, *PublishTaskArtifactRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTaskArtifact not implemented")
}
func (UnimplementedAgentHubServer) SubscribeToMessages(*SubscribeToMessagesRequest, grpc.ServerStreamingServer[AgentEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToMessages not implemented")
}
func (UnimplementedAgentHubServer) SubscribeToTasks(*SubscribeToTasksRequest, grpc.ServerStreamingServer[AgentEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTasks not implemented")
}
func (UnimplementedAgentHubServer) SubscribeToAgentEvents(*SubscribeToAgentEventsRequest, grpc.ServerStreamingServer[AgentEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToAgentEvents not implemented")
}
func (UnimplementedAgentHubServer) GetTask(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedAgentHubServer) CancelTask(context.Context, *CancelTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedAgentHubServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedAgentHubServer) GetAgentCard(context.Context, *emptypb.Empty) (*AgentCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentCard not implemented")
}
func (UnimplementedAgentHubServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedAgentHubServer) mustEmbedUnimplementedAgentHubServer() {}
func (UnimplementedAgentHubServer) testEmbeddedByValue()                  {}

// UnsafeAgentHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentHubServer will
// result in compilation errors.
type UnsafeAgentHubServer interface {
	mustEmbedUnimplementedAgentHubServer()
}

func RegisterAgentHubServer(s grpc.ServiceRegistrar, srv AgentHubServer) {
	// If the following call pancis, it indicates UnimplementedAgentHubServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentHub_ServiceDesc, srv)
}

func _AgentHub_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_PublishTaskUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).PublishTaskUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_PublishTaskUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).PublishTaskUpdate(ctx, req.(*PublishTaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_PublishTaskArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTaskArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).PublishTaskArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_PublishTaskArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).PublishTaskArtifact(ctx, req.(*PublishTaskArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_SubscribeToMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentHubServer).SubscribeToMessages(m, &grpc.GenericServerStream[SubscribeToMessagesRequest, AgentEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentHub_SubscribeToMessagesServer = grpc.ServerStreamingServer[AgentEvent]

func _AgentHub_SubscribeToTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToTasksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentHubServer).SubscribeToTasks(m, &grpc.GenericServerStream[SubscribeToTasksRequest, AgentEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentHub_SubscribeToTasksServer = grpc.ServerStreamingServer[AgentEvent]

func _AgentHub_SubscribeToAgentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToAgentEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentHubServer).SubscribeToAgentEvents(m, &grpc.GenericServerStream[SubscribeToAgentEventsRequest, AgentEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentHub_SubscribeToAgentEventsServer = grpc.ServerStreamingServer[AgentEvent]

func _AgentHub_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_GetAgentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).GetAgentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_GetAgentCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).GetAgentCard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentHub_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentHubServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentHub_RegisterAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentHubServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentHub_ServiceDesc is the grpc.ServiceDesc for AgentHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agenthub.AgentHub",
	HandlerType: (*AgentHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _AgentHub_PublishMessage_Handler,
		},
		{
			MethodName: "PublishTaskUpdate",
			Handler:    _AgentHub_PublishTaskUpdate_Handler,
		},
		{
			MethodName: "PublishTaskArtifact",
			Handler:    _AgentHub_PublishTaskArtifact_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _AgentHub_GetTask_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _AgentHub_CancelTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _AgentHub_ListTasks_Handler,
		},
		{
			MethodName: "GetAgentCard",
			Handler:    _AgentHub_GetAgentCard_Handler,
		},
		{
			MethodName: "RegisterAgent",
			Handler:    _AgentHub_RegisterAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToMessages",
			Handler:       _AgentHub_SubscribeToMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToTasks",
			Handler:       _AgentHub_SubscribeToTasks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToAgentEvents",
			Handler:       _AgentHub_SubscribeToAgentEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/eventbus.proto",
}
