syntax = "proto3";

package agenthub;

// Specify the Go package for generated code.
option go_package = "events/a2a;a2a";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "proto/a2a_core.proto";

// ===== EDA Broker Event Wrappers =====
//
// The AgentHub protobuf definition provides an Event-Driven Architecture (EDA)
// broker that transports Agent2Agent (A2A) protocol-compliant messages.
// This hybrid approach maintains the scalability benefits of EDA while ensuring
// full interoperability with A2A-compliant agents and systems.

// AgentEvent wraps A2A messages for transport through the EDA broker.
// This allows A2A messages to be routed, queued, and delivered using
// event-driven patterns while maintaining A2A protocol compliance.
message AgentEvent {
  string event_id = 1;                     // Unique identifier for this event (for deduplication and tracking)
  google.protobuf.Timestamp timestamp = 2; // When this event was created (for ordering and TTL)

  // A2A-compliant payload - exactly one of these must be set
  oneof payload {
    a2a.Message message = 10;              // A2A Message for agent communication
    a2a.Task task = 11;                    // A2A Task for work coordination
    TaskStatusUpdateEvent status_update = 12; // Task lifecycle state changes
    TaskArtifactUpdateEvent artifact_update = 13; // Task output artifacts
  }

  // EDA routing metadata for event distribution
  AgentEventMetadata routing = 20;

  // OpenTelemetry distributed tracing context
  string trace_id = 30;                    // Trace ID for request correlation
  string span_id = 31;                     // Span ID for operation tracking
}

// AgentEventMetadata provides routing and delivery information for events.
// This enables sophisticated event routing patterns including point-to-point,
// broadcast, topic-based, and priority-based delivery.
message AgentEventMetadata {
  string from_agent_id = 1;               // Source agent identifier (for reply routing)
  string to_agent_id = 2;                 // Target agent ID (empty string means broadcast to all)
  string event_type = 3;                  // Event classification ("message", "task", "status_update", "artifact")
  repeated string subscriptions = 4;      // Topic-based routing tags for content-based filtering
  Priority priority = 5;                  // Delivery priority for event queue ordering
}

// TaskStatusUpdateEvent notifies subscribers about A2A task lifecycle changes.
// This event is published whenever a task transitions between states
// (SUBMITTED → WORKING → COMPLETED/FAILED/CANCELLED).
message TaskStatusUpdateEvent {
  string task_id = 1;                     // A2A task identifier
  string context_id = 2;                  // A2A conversation context
  a2a.TaskStatus status = 3;              // New A2A task status with state and update message
  bool final = 4;                         // True if this is the terminal state for the task
  google.protobuf.Struct metadata = 5;    // Additional event metadata (timing, agent info, etc.)
}

// TaskArtifactUpdateEvent delivers A2A task output artifacts to subscribers.
// Supports both atomic artifact delivery and streaming for large outputs.
message TaskArtifactUpdateEvent {
  string task_id = 1;                     // A2A task that produced this artifact
  string context_id = 2;                  // A2A conversation context
  a2a.Artifact artifact = 3;              // The A2A artifact containing structured output
  bool append = 4;                        // True to append to existing artifact, false to replace
  bool last_chunk = 5;                    // True if this completes a streaming artifact
  google.protobuf.Struct metadata = 6;    // Delivery metadata (chunk info, compression, etc.)
}

// Priority levels for event processing and delivery ordering.
// Higher priority events are processed before lower priority ones in queues.
enum Priority {
  PRIORITY_UNSPECIFIED = 0;              // Default priority (treated as MEDIUM)
  PRIORITY_LOW = 1;                       // Background tasks, cleanup, telemetry
  PRIORITY_MEDIUM = 2;                    // Normal agent-to-agent communication
  PRIORITY_HIGH = 3;                      // Urgent tasks, real-time responses
  PRIORITY_CRITICAL = 4;                  // System alerts, error conditions
}

// ===== Request/Response Messages =====

message PublishMessageRequest {
  a2a.Message message = 1;                // A2A message
  AgentEventMetadata routing = 2;         // EDA routing info
}

message PublishTaskUpdateRequest {
  TaskStatusUpdateEvent update = 1;
  AgentEventMetadata routing = 2;
}

message PublishTaskArtifactRequest {
  TaskArtifactUpdateEvent artifact = 1;
  AgentEventMetadata routing = 2;
}

message PublishResponse {
  bool success = 1;
  string error = 2;
  string event_id = 3;                    // Generated event ID
}

message SubscribeToMessagesRequest {
  string agent_id = 1;                    // Subscribe for this agent
  repeated string message_types = 2;      // Optional filter
  repeated string contexts = 3;           // Optional context filter
}

message SubscribeToTasksRequest {
  string agent_id = 1;                    // Subscribe for this agent
  repeated string task_types = 2;         // Optional filter
  repeated a2a.TaskState states = 3;      // Optional state filter
}

message SubscribeToAgentEventsRequest {
  string agent_id = 1;                    // Subscribe for this agent
  repeated string event_types = 2;        // Optional event type filter
}

message GetTaskRequest {
  string task_id = 1;
  int32 history_length = 2;               // How much history to include
}

message CancelTaskRequest {
  string task_id = 1;
  string reason = 2;                      // Optional cancellation reason
}

message ListTasksRequest {
  string agent_id = 1;                    // Tasks for this agent
  string context_id = 2;                  // Optional context filter
  repeated a2a.TaskState states = 3;      // Optional state filter
  int32 page_size = 4;
  string page_token = 5;
}

message ListTasksResponse {
  repeated a2a.Task tasks = 1;
  string next_page_token = 2;
}

// ===== EDA-based AgentHub Service =====
//
// The AgentHub service provides an Event-Driven Architecture broker for
// Agent2Agent (A2A) protocol messages. This service acts as a central hub
// that routes A2A messages between agents while maintaining EDA scalability
// patterns such as async delivery, fan-out routing, and event persistence.

service AgentHub {
  // ===== A2A Message Publishing (EDA style) =====

  // PublishMessage submits an A2A message for delivery through the broker.
  // The message is wrapped in an AgentEvent and routed based on metadata.
  // Supports point-to-point, broadcast, and topic-based delivery patterns.
  rpc PublishMessage(PublishMessageRequest) returns (PublishResponse);

  // PublishTaskUpdate notifies subscribers about A2A task state changes.
  // Used to broadcast task lifecycle events (started, progress, completed).
  rpc PublishTaskUpdate(PublishTaskUpdateRequest) returns (PublishResponse);

  // PublishTaskArtifact delivers A2A task output artifacts to subscribers.
  // Supports both atomic delivery and streaming for large artifacts.
  rpc PublishTaskArtifact(PublishTaskArtifactRequest) returns (PublishResponse);

  // ===== A2A Event Subscriptions (EDA style) =====

  // SubscribeToMessages creates a stream of A2A message events for an agent.
  // The agent receives all messages routed to it or matching its subscriptions.
  rpc SubscribeToMessages(SubscribeToMessagesRequest) returns (stream AgentEvent);

  // SubscribeToTasks creates a stream of A2A task events for an agent.
  // Includes new tasks, status updates, and artifact notifications.
  rpc SubscribeToTasks(SubscribeToTasksRequest) returns (stream AgentEvent);

  // SubscribeToAgentEvents creates a unified stream of all events for an agent.
  // Combines messages, tasks, status updates, and artifacts in one stream.
  rpc SubscribeToAgentEvents(SubscribeToAgentEventsRequest) returns (stream AgentEvent);

  // ===== A2A Task Management (compatible with A2A spec) =====

  // GetTask retrieves the current state of an A2A task by ID.
  // Returns the complete task with history, status, and artifacts.
  rpc GetTask(GetTaskRequest) returns (a2a.Task);

  // CancelTask cancels an active A2A task and notifies subscribers.
  // Only tasks in SUBMITTED or WORKING state can be cancelled.
  rpc CancelTask(CancelTaskRequest) returns (a2a.Task);

  // ListTasks returns A2A tasks matching the specified criteria.
  // Supports filtering by agent, context, state, and pagination.
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);

  // ===== Agent Discovery (A2A compatible) =====

  // GetAgentCard returns the broker's A2A agent card for discovery.
  // Enables other agents to discover the broker's capabilities and endpoints.
  rpc GetAgentCard(google.protobuf.Empty) returns (a2a.AgentCard);

  // RegisterAgent registers an agent with the broker for event routing.
  // Enables the broker to route events to the agent and track its capabilities.
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
}

// ===== Agent Registration (EDA-specific) =====

message RegisterAgentRequest {
  a2a.AgentCard agent_card = 1;          // Agent's A2A card
  repeated string subscriptions = 2;      // Event subscriptions
  string health_check_url = 3;           // Optional health check endpoint
}

message RegisterAgentResponse {
  bool success = 1;
  string error = 2;
  string agent_id = 3;                   // Assigned/confirmed agent ID
}

// ===== Legacy Support (DEPRECATED - for migration) =====

// DEPRECATED: Use a2a.Task instead
message TaskMessage {
  option deprecated = true;
  string task_id = 1;
  string task_type = 2;
  google.protobuf.Struct parameters = 3;
  string requester_agent_id = 4;
  string responder_agent_id = 5;
  google.protobuf.Timestamp deadline = 6;
  Priority priority = 7;
  google.protobuf.Struct metadata = 8;
  google.protobuf.Timestamp created_at = 9;
}

// DEPRECATED: Use a2a.Task with appropriate status instead
message TaskResult {
  option deprecated = true;
  string task_id = 1;
  a2a.TaskState status = 2;
  google.protobuf.Struct result = 3;
  string error_message = 4;
  string executor_agent_id = 5;
  google.protobuf.Timestamp completed_at = 6;
  google.protobuf.Struct execution_metadata = 7;
}

// DEPRECATED: Use TaskStatusUpdateEvent instead
message TaskProgress {
  option deprecated = true;
  string task_id = 1;
  a2a.TaskState status = 2;
  string progress_message = 3;
  int32 progress_percentage = 4;
  google.protobuf.Struct progress_data = 5;
  string executor_agent_id = 6;
  google.protobuf.Timestamp updated_at = 7;
}
